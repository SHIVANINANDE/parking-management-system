# Docker Swarm configuration for production deployment
version: '3.8'

services:
  # Load balancer
  traefik:
    image: traefik:v3.0
    command:
      - --api.dashboard=true
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.swarmMode=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.letsencrypt.acme.tlschallenge=true
      - --certificatesresolvers.letsencrypt.acme.email=admin@yourdomain.com
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      - --log.level=INFO
      - --accesslog=true
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - letsencrypt_data:/letsencrypt
    networks:
      - parking_network
    deploy:
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure

  # PostgreSQL with PostGIS
  postgres:
    image: postgis/postgis:15-3.4
    environment:
      POSTGRES_DB: parking_db
      POSTGRES_USER: parking_user
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGIS_VERSION: 3.4
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - parking_network
    secrets:
      - postgres_password
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.database == true
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Redis cluster
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass-file /run/secrets/redis_password
    volumes:
      - redis_data:/data
    networks:
      - parking_network
    secrets:
      - redis_password
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Backend API
  backend:
    image: parking-backend:latest
    environment:
      DATABASE_URL: postgresql+asyncpg://parking_user:@postgres:5432/parking_db
      REDIS_URL: redis://:@redis:6379
      ELASTICSEARCH_URL: http://elasticsearch:9200
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      ENV: production
      LOG_LEVEL: info
    networks:
      - parking_network
    secrets:
      - postgres_password
      - redis_password
      - jwt_secret
    deploy:
      labels:
        - traefik.enable=true
        - traefik.http.routers.backend.rule=Host(`api.yourdomain.com`)
        - traefik.http.routers.backend.tls=true
        - traefik.http.routers.backend.tls.certresolver=letsencrypt
        - traefik.http.services.backend.loadbalancer.server.port=8000
      replicas: 3
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback

  # Frontend
  frontend:
    image: parking-frontend:latest
    networks:
      - parking_network
    deploy:
      labels:
        - traefik.enable=true
        - traefik.http.routers.frontend.rule=Host(`yourdomain.com`)
        - traefik.http.routers.frontend.tls=true
        - traefik.http.routers.frontend.tls.certresolver=letsencrypt
        - traefik.http.services.frontend.loadbalancer.server.port=3000
      replicas: 2
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback

  # Elasticsearch
  elasticsearch:
    image: elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - parking_network
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.elasticsearch == true
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - parking_network
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - prometheus_data:/prometheus
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - parking_network
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.monitoring == true
      restart_policy:
        condition: on-failure

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_PASSWORD_FILE=/run/secrets/grafana_password
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - parking_network
    secrets:
      - grafana_password
    deploy:
      labels:
        - traefik.enable=true
        - traefik.http.routers.grafana.rule=Host(`monitoring.yourdomain.com`)
        - traefik.http.routers.grafana.tls=true
        - traefik.http.routers.grafana.tls.certresolver=letsencrypt
        - traefik.http.services.grafana.loadbalancer.server.port=3000
      replicas: 1
      restart_policy:
        condition: on-failure

networks:
  parking_network:
    driver: overlay
    attachable: true

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:
  kafka_data:
  prometheus_data:
  grafana_data:
  letsencrypt_data:

secrets:
  postgres_password:
    external: true
  redis_password:
    external: true
  jwt_secret:
    external: true
  grafana_password:
    external: true
