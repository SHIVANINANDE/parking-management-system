# Enhanced Prometheus Configuration for Comprehensive Monitoring

global:
  scrape_interval: 15s
  evaluation_interval: 15s

# Load and evaluate alert rules
rule_files:
  - "/etc/prometheus/rules/*.yml"

# Alert manager configuration
alerting:
  alertmanagers:
    - static_configs:
        - targets:
          - alertmanager:9093

# Scrape configurations
scrape_configs:
  # Prometheus self-monitoring
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']
    scrape_interval: 30s

  # Application metrics from FastAPI backend
  - job_name: 'parking-api'
    static_configs:
      - targets: ['backend:8000']
    metrics_path: '/metrics'
    scrape_interval: 15s
    scrape_timeout: 10s

  # Frontend application metrics
  - job_name: 'parking-frontend'
    static_configs:
      - targets: ['frontend:80']
    metrics_path: '/metrics'
    scrape_interval: 30s

  # PostgreSQL database metrics
  - job_name: 'postgres'
    static_configs:
      - targets: ['postgres_exporter:9187']
    scrape_interval: 30s

  # Redis metrics
  - job_name: 'redis'
    static_configs:
      - targets: ['redis_exporter:9121']
    scrape_interval: 30s

  # Kafka metrics
  - job_name: 'kafka'
    static_configs:
      - targets: ['kafka_exporter:9308']
    scrape_interval: 30s

  # Elasticsearch metrics
  - job_name: 'elasticsearch'
    static_configs:
      - targets: ['elasticsearch_exporter:9114']
    scrape_interval: 30s

  # Nginx load balancer metrics
  - job_name: 'nginx'
    static_configs:
      - targets: ['nginx_exporter:9113']
    scrape_interval: 30s

  # System metrics via Node Exporter
  - job_name: 'node-exporter'
    static_configs:
      - targets: ['node-exporter:9100']
    scrape_interval: 15s

  # Container metrics via cAdvisor
  - job_name: 'cadvisor'
    static_configs:
      - targets: ['cadvisor:8080']
    scrape_interval: 15s

  # Blackbox exporter for endpoint monitoring
  - job_name: 'blackbox'
    metrics_path: /probe
    params:
      module: [http_2xx]
    static_configs:
      - targets:
        - http://frontend:80/health
        - http://backend:8000/health
        - http://backend:8000/health/detailed
    relabel_configs:
      - source_labels: [__address__]
        target_label: __param_target
      - source_labels: [__param_target]
        target_label: instance
      - target_label: __address__
        replacement: blackbox_exporter:9115

  # Custom application business metrics
  - job_name: 'parking-business-metrics'
    static_configs:
      - targets: ['backend:8000']
    metrics_path: '/api/v1/metrics/business'
    scrape_interval: 60s

# Recording rules for performance optimization
recording_rules:
  # API performance aggregations
  - name: api_performance_rules
    rules:
      - record: api:request_rate_5m
        expr: rate(http_requests_total[5m])
      
      - record: api:request_duration_95th_percentile_5m
        expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m]))
      
      - record: api:error_rate_5m
        expr: rate(http_requests_total{status_code=~"5.."}[5m]) / rate(http_requests_total[5m])

  # Database performance aggregations
  - name: database_performance_rules
    rules:
      - record: db:query_duration_95th_percentile_5m
        expr: histogram_quantile(0.95, rate(database_query_duration_seconds_bucket[5m]))
      
      - record: db:connection_utilization
        expr: database_connection_pool_size{state="active"} / database_connection_pool_size{state="total"}

  # System resource aggregations
  - name: system_resource_rules
    rules:
      - record: system:cpu_utilization_avg_5m
        expr: avg(rate(node_cpu_seconds_total{mode!="idle"}[5m])) by (instance)
      
      - record: system:memory_utilization
        expr: (node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes) / node_memory_MemTotal_bytes
      
      - record: system:disk_utilization
        expr: (node_filesystem_size_bytes - node_filesystem_free_bytes) / node_filesystem_size_bytes

  # Business metrics aggregations
  - name: business_metrics_rules
    rules:
      - record: parking:occupancy_rate_by_lot
        expr: parking_spot_occupancy{status="occupied"} / (parking_spot_occupancy{status="occupied"} + parking_spot_occupancy{status="available"})
      
      - record: parking:revenue_per_hour
        expr: rate(payment_amount_dollars_sum[1h])
      
      - record: parking:reservation_success_rate
        expr: rate(reservations_total{status="confirmed"}[5m]) / rate(reservations_total[5m])

# Remote write configuration (for long-term storage)
remote_write:
  - url: "http://victoria-metrics:8428/api/v1/write"
    queue_config:
      max_samples_per_send: 10000
      batch_send_deadline: 5s
      max_shards: 200
      min_shards: 1
      max_backoff: 5s
      min_backoff: 30ms
